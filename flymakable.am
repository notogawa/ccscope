# Copyright (c) 2011, Noriyuki OHKAWA a.k.a. notogawa.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the following
#   disclaimer in the documentation and/or other materials provided
#   with the distribution.
#
# * Neither the name of Noriyuki OHKAWA and notogawa nor the names of other
#   contributors may be used to endorse or promote products derived
#   from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# [PrefixAndPrimary]
check_syntax_PPS=\
lib_LTLIBRARIES \
noinst_LTLIBRARIES \
check_LTLIBRARIES \
EXTRA_LTLIBRARIES \
bin_PROGRAMS \
sbin_PROGRAMS \
libexec_PROGRAMS \
noinst_PROGRAMS \
check_PROGRAMS \
EXTRA_PROGRAMS
# 他？

# [Candidate]
check_syntax_CANDIDATES=\
$(foreach c,$(check_syntax_PPS),$($(c)))

# Candidate -> Target
check_syntax_conv_TARGET=\
$(subst -,_,$(subst .,_,$(1)))

# [Target]
check_syntax_conv_TARGETS=\
$(foreach c,$(check_syntax_CANDIDATES),$(call check_syntax_conv_TARGET,$(c)))

# C/CXX -> Target -> [Flag]
check_syntax_retrieve_FLAGS=\
$(foreach x,CPP $(1),$($(2)_$(x)FLAGS))

# FlymakeSource -> OriginalSource
check_syntax_CHKSOURCES=\
$(subst _flymake.,.,$(CHK_SOURCES))

# Target -> [Target]
check_syntax_match_TARGET=\
$(if $(filter $(check_syntax_CHKSOURCES),$($(1)_SOURCES)),$(1),)

# [Target]
check_syntax_filter_TARGET=\
$(firstword $(foreach t,$(check_syntax_conv_TARGETS),$(call check_syntax_match_TARGET,$(t))))

# C/CXX -> [Flag]
check_syntax_find_FLAGS=\
$(call check_syntax_retrieve_FLAGS,$(1),$(check_syntax_filter_TARGET))

# C/CXX -> [Flag]
check_syntax_ARGS=\
$(call check_syntax_find_FLAGS,$(1)) \
-fsyntax-only \
$(CHK_SOURCES)

check-syntax:
	@case "$${CHK_SOURCES}" in \
	  *.c)   $(COMPILE)    $(call check_syntax_ARGS,C)   ;; \
	  *.cpp) $(CXXCOMPILE) $(call check_syntax_ARGS,CXX) ;; \
	  *)     exit 1 ;; \
	esac

.PHONY: check-syntax
